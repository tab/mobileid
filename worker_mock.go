// Code generated by MockGen. DO NOT EDIT.
// Source: worker.go
//
// Generated by this command:
//
//	mockgen -source=worker.go -destination=worker_mock.go -package=mobileid
//

// Package mobileid is a generated GoMock package.
package mobileid

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockWorker is a mock of Worker interface.
type MockWorker struct {
	ctrl     *gomock.Controller
	recorder *MockWorkerMockRecorder
	isgomock struct{}
}

// MockWorkerMockRecorder is the mock recorder for MockWorker.
type MockWorkerMockRecorder struct {
	mock *MockWorker
}

// NewMockWorker creates a new mock instance.
func NewMockWorker(ctrl *gomock.Controller) *MockWorker {
	mock := &MockWorker{ctrl: ctrl}
	mock.recorder = &MockWorkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorker) EXPECT() *MockWorkerMockRecorder {
	return m.recorder
}

// Process mocks base method.
func (m *MockWorker) Process(ctx context.Context, sessionId string) <-chan Result {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", ctx, sessionId)
	ret0, _ := ret[0].(<-chan Result)
	return ret0
}

// Process indicates an expected call of Process.
func (mr *MockWorkerMockRecorder) Process(ctx, sessionId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockWorker)(nil).Process), ctx, sessionId)
}

// Start mocks base method.
func (m *MockWorker) Start(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start", ctx)
}

// Start indicates an expected call of Start.
func (mr *MockWorkerMockRecorder) Start(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockWorker)(nil).Start), ctx)
}

// Stop mocks base method.
func (m *MockWorker) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockWorkerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockWorker)(nil).Stop))
}

// WithConcurrency mocks base method.
func (m *MockWorker) WithConcurrency(concurrency int) Worker {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithConcurrency", concurrency)
	ret0, _ := ret[0].(Worker)
	return ret0
}

// WithConcurrency indicates an expected call of WithConcurrency.
func (mr *MockWorkerMockRecorder) WithConcurrency(concurrency any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithConcurrency", reflect.TypeOf((*MockWorker)(nil).WithConcurrency), concurrency)
}

// WithQueueSize mocks base method.
func (m *MockWorker) WithQueueSize(size int) Worker {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithQueueSize", size)
	ret0, _ := ret[0].(Worker)
	return ret0
}

// WithQueueSize indicates an expected call of WithQueueSize.
func (mr *MockWorkerMockRecorder) WithQueueSize(size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithQueueSize", reflect.TypeOf((*MockWorker)(nil).WithQueueSize), size)
}
