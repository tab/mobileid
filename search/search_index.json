{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Golang client for the Mobile-ID API (https://www.mobile-id.lt/en/). It is a simple wrapper around the API, which helps easily integrate Mobile-ID authentication into Golang applications.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Flexible client configuration</li> <li>Concurrent processing</li> <li>Optional TLS configuration (certificate pinning)</li> </ul>"},{"location":"#contents","title":"Contents","text":"<ul> <li>Installation</li> <li>Usage</li> </ul>"},{"location":"installation/","title":"Installation","text":"<p>Use <code>go get</code> to install the package</p> <pre><code>go get -u github.com/tab/mobileid\n</code></pre>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#configure-a-client","title":"Configure a client","text":"<p>Create a new client using <code>NewClient()</code> and customize its configuration using chainable methods.</p> <pre><code>package main\n\nimport (\n  \"context\"\n  \"log\"\n  \"time\"\n\n  \"github.com/tab/mobileid\"\n)\n\nfunc main() {\n  client := mobileid.NewClient().\n    WithRelyingPartyName(\"DEMO\").\n    WithRelyingPartyUUID(\"00000000-0000-0000-0000-000000000000\").\n    WithHashType(\"SHA512\").\n    WithText(\"Enter PIN1\").\n    WithTextFormat(\"GSM-7\").\n    WithLanguage(\"ENG\").\n    WithURL(\"https://tsp.demo.sk.ee/mid-api\").\n    WithTimeout(60 * time.Second)\n\n  if err := client.Validate(); err != nil {\n    log.Fatal(\"Invalid configuration:\", err)\n  }\n\n  // Further processing...\n}\n</code></pre> <p>Check client default configuration values:</p> <pre><code>const (\n  Text       = \"Enter PIN1\"\n  TextFormat = \"GSM-7\"\n  Language   = \"ENG\"\n  Timeout    = requests.Timeout\n  URL        = \"https://tsp.demo.sk.ee/mid-api\"\n)\n\ncfg := &amp;config.Config{\n  HashType:   utils.HashTypeSHA512,\n  Text:       Text,\n  TextFormat: TextFormat,\n  Language:   Language,\n  URL:        URL,\n  Timeout:    Timeout,\n}\n</code></pre>"},{"location":"usage/#start-authentication","title":"Start authentication","text":"<p>Initiate a new authentication session with the <code>Mobile-ID</code> provider by calling <code>CreateSession</code>. This function generates a random hash, constructs the session request, and returns a session that includes an identifier and a verification code.</p> <pre><code>func main() {\n// Create a client...\n\n\nphoneNumber := \"+37268000769\"\nidentity := \"60001017869\"\n\nsession, err := client.CreateSession(context.Background(), phoneNumber, identity)\nif err != nil {\nlog.Fatal(\"Error creating session:\", err)\n}\n\nfmt.Println(\"Session created:\", session)\n}\n</code></pre>"},{"location":"usage/#fetch-authentication-session","title":"Fetch authentication session","text":"<pre><code>func main() {\n// Create a client...\n\nperson, err := client.FetchSession(context.Background(), sessionId)\nif err != nil {\nlog.Fatal(\"Error fetching session:\", err)\n}\n\nfmt.Println(\"Session status:\", session.State)\n}\n</code></pre>"},{"location":"usage/#async-example","title":"Async example","text":"<p>For applications requiring the processing of multiple authentication sessions simultaneously, <code>Mobile-ID</code> provides a worker model. Create a worker using <code>NewWorker</code>, configure its concurrency and queue size, and then start processing.</p> <pre><code>package main\n\nimport (\n  \"context\"\n  \"fmt\"\n  \"sync\"\n  \"time\"\n\n  \"github.com/tab/mobileid\"\n)\n\nfunc main() {\n  client := mobileid.NewClient().\n    WithRelyingPartyName(\"DEMO\").\n    WithRelyingPartyUUID(\"00000000-0000-0000-0000-000000000000\").\n    WithHashType(\"SHA512\").\n    WithText(\"Enter PIN1\").\n    WithTextFormat(\"GSM-7\").\n    WithLanguage(\"ENG\").\n    WithURL(\"https://tsp.demo.sk.ee/mid-api\").\n    WithTimeout(60 * time.Second)\n\n  identities := map[string]string{\n    \"51307149560\": \"+37269930366\",\n    \"60001017869\": \"+37268000769\",\n    \"60001018800\": \"+37200000566\",\n    \"60001019939\": \"+37200000266\",\n    \"60001019947\": \"+37207110066\",\n    \"60001019950\": \"+37201100266\",\n    \"60001019961\": \"+37200000666\",\n    \"60001019972\": \"+37201200266\",\n    \"60001019983\": \"+37213100266\",\n    \"50001018908\": \"+37266000266\",\n  }\n\n  worker := mobileid.NewWorker(client).\n    WithConcurrency(50).\n    WithQueueSize(100)\n\n  ctx := context.Background()\n\n  worker.Start(ctx)\n  defer worker.Stop()\n\n  var wg sync.WaitGroup\n\n  for identity, phoneNumber := range identities {\n    wg.Add(1)\n\n    session, err := client.CreateSession(ctx, phoneNumber, identity)\n    if err != nil {\n      fmt.Println(\"Error creating session:\", err)\n      wg.Done()\n    }\n    fmt.Println(\"Session created:\", session)\n\n    resultCh := worker.Process(ctx, session.Id)\n    go func() {\n      defer wg.Done()\n      result := &lt;-resultCh\n      if result.Err != nil {\n        fmt.Println(\"Error fetching session:\", result.Err)\n      } else {\n        fmt.Println(\"Fetched person:\", result.Person)\n      }\n    }()\n  }\n\n  wg.Wait()\n}\n</code></pre>"},{"location":"usage/#certificate-pinning-optional","title":"Certificate pinning (optional)","text":"<pre><code>package main\n\nimport (\n  \"context\"\n  \"fmt\"\n  \"sync\"\n  \"time\"\n\n  \"github.com/tab/mobileid\"\n)\n\nfunc main() {\n  manager, err := mobileid.NewCertificateManager(\"./certs\")\n  if err != nil {\n    fmt.Println(\"Failed to create certificate manager:\", err)\n  }\n  tlsConfig := manager.TLSConfig()\n\n  client := mobileid.NewClient().\n    WithRelyingPartyName(\"DEMO\").\n    WithRelyingPartyUUID(\"00000000-0000-0000-0000-000000000000\").\n    WithHashType(\"SHA512\").\n    WithText(\"Enter PIN1\").\n    WithTextFormat(\"GSM-7\").\n    WithLanguage(\"ENG\").\n    WithURL(\"https://tsp.demo.sk.ee/mid-api\").\n    WithTimeout(60 * time.Second).\n    WithTLSConfig(tlsConfig)\n\n  // Further processing...\n</code></pre> <pre><code>Session created: &amp;{b2769811-16de-42f1-a06e-c580d07c1298 5960}\nFetched person: &amp;{PNOEE-60001017869 60001017869 EID2016 TESTNUMBER}\n</code></pre> <ul> <li>b2769811-16de-42f1-a06e-c580d07c1298 \u2013 session id</li> <li> <p>5960 \u2013 verification code</p> </li> <li> <p>PNOEE-60001017869 \u2013 formatted identity</p> </li> <li>60001017869 \u2013 personal identification code</li> <li>EID2016 \u2013 person first name</li> <li>TESTNUMBER \u2013 person last name</li> </ul>"}]}